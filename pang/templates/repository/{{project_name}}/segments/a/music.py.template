import fractions

import abjad
import pang
from abjadext import nauert

from {{project_name}} import library
from {{project_name}}.soundpointsgenerators import SoundPointsGenerator


def main() -> None:
    score = library.make_empty_score()
    q_schema = nauert.MeasurewiseQSchema(
        search_tree=nauert.UnweightedSearchTree(definition={5: None}),
        tempo=abjad.MetronomeMark(
            abjad.Duration(1, 4), fractions.Fraction(78), decimal=True
        ),
        time_signature=(4, 4),
    )
    quantizing_metadata = pang.populate_voices_from_sequence(
        pang.Sequence.from_sequences(
            (
                _generate_first_sequence(),
                _generate_second_sequence(),
                _generate_third_sequence(),
            )
        ),
        (
            pang.VoiceSpecification(
                score[library.VOICE_NAME],
                q_schema=q_schema,
                grace_handler=nauert.DiscardingGraceHandler(),
            ),
        ),
    )
    abjad.attach(abjad.BarLine(":|."), abjad.get.leaf(score, -1))
    metadata = pang.build.collect_metadata(score, quantizing_metadata)
    pang.build.persist(score, metadata)
    library.symlink_music_ily_from_segment_directory_to_build_directory("a")


def _generate_first_sequence() -> pang.Sequence:
    return pang.Sequence.from_sound_points_generator(
        sound_points_generator=SoundPointsGenerator(
            (0.1538, 0.3076),
            (0.7, 0.3),
            1,
            0.3076,
            1,
            pang.gen_pitches_from_sieve(
                abjad.Pattern(
                    indices=library.THIRD_MODE_OF_LIMITED_TRANSPOSITION, period=12
                ).rotate(n=1),
                origin=0,
                low=-7,
                high=24,
            ),
            seed=6899778665656846847236458726385,
        ),
        sequence_duration=20,
    )


def _generate_second_sequence() -> pang.Sequence:
    return pang.Sequence.from_sound_points_generator(
        sound_points_generator=SoundPointsGenerator(
            (0.1538, 0.3076),
            (0.7, 0.3),
            1,
            0.3076,
            1,
            pang.gen_pitches_from_sieve(
                abjad.Pattern(
                    indices=library.THIRD_MODE_OF_LIMITED_TRANSPOSITION, period=12
                ).rotate(n=2),
                origin=0,
                low=-7,
                high=24,
            ),
            seed=928374982739827398,
        ),
        sequence_duration=20,
    )


def _generate_third_sequence() -> pang.Sequence:
    return pang.Sequence.from_sound_points_generator(
        sound_points_generator=SoundPointsGenerator(
            (0.1538, 0.3076),
            (0.7, 0.3),
            1,
            0.3076,
            1,
            pang.gen_pitches_from_sieve(
                abjad.Pattern(
                    indices=library.THIRD_MODE_OF_LIMITED_TRANSPOSITION, period=12
                ).rotate(n=0),
                origin=0,
                low=-7,
                high=24,
            ),
            seed=8346865238658648254529,
        ),
        sequence_duration=20,
    )


if __name__ == "__main__":
    main()
